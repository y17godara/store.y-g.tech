// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  ROOT
}

model User {
  id                 String                 @id @default(cuid())
  name               String?
  email              String?                @unique
  emailVerified      DateTime? // TODO
  image              String?
  password           String? // TODO
  role               UserRole               @default(USER) // TODO
  accounts           Account[] // TODO
  isBlocked          Boolean                @default(false) // TODO
  isTwoFactorEnabled Boolean                @default(false) // TODO
  twoFactorEnabled   TwoFactorConfirmation? // TODO
  cartProducts       CartProduct[] // TODO
  favorites          UserFavorite[] // TODO
  historyProducts    HistoryProduct[] // TODO
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Product {
  id                 String                 @id @default(uuid())
  productId          String                 @unique @default(uuid())
  name               String
  description        String
  price              Float
  ratings            Float?                 @default(0)
  discount           Float?                 @default(0)
  featuredImage      String                 @default("https://source.unsplash.com/random")
  images             ProductImage[]         @relation("ProductToProductImage")
  category           String?                @default("unknown")
  company            String?                @default("unknown")
  addedBy            String?                @default("unknown")
  cartProducts       CartProduct[]          @relation("CartProductToProduct")
  favorites          UserFavorite[]         @relation("UserFavoriteToProduct")
  historyProducts    HistoryProduct[]       @relation("HistoryProductToProduct")
  siteFeatured       siteFeaturedProducts[]
  siteDeals          siteDeals[]
  newlyAddedProducts newlyAddedProducts[]
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
}

model ProductImage {
  id        String   @id @default(uuid())
  imageUrl  String
  product   Product  @relation("ProductToProductImage", fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserFavorite {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation("UserFavoriteToProduct", fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartProduct {
  id        String   @id @default(uuid())
  quantity  Int      @default(1)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation("CartProductToProduct", fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HistoryProduct {
  id           String   @id @default(uuid())
  lastViewedAt DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  product      Product  @relation("HistoryProductToProduct", fields: [productId], references: [id])
  productId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model siteFeaturedProducts {
  id        String   @id @default(uuid())
  href      String
  bannerURL String
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model siteDeals {
  id        String @id @default(uuid())
  href      String
  bannerURL String
  discount  Float

  productId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product? @relation(fields: [productId], references: [id])
}

model newlyAddedProducts {
  id        String @id @default(uuid())
  href      String
  bannerURL String

  productId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product? @relation(fields: [productId], references: [id])
}
