// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  userId       String         @unique
  email        String         @unique
  name         String?
  username     String
  avatar       String?
  cartProducts CartProduct[]  @relation("CartProductToUser")
  favorites    UserFavorite[] @relation("UserFavoriteToUser")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Product {
  id           String         @id @default(uuid())
  productId    String         @unique @default(uuid())
  name         String
  description  String
  price        Float
  ratings      Float?         @default(0)
  discount     Float?         @default(0)
  image        String?        @default("https://via.placeholder.com/350")
  category     String?        @default("unknown")
  company      String?        @default("unknown")
  addedBy      String?        @default("unknown")
  cartProducts CartProduct[]  @relation("CartProductToProduct")
  favorites    UserFavorite[] @relation("UserFavoriteToProduct")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model UserFavorite {
  id        String   @id @default(uuid())
  user      User     @relation("UserFavoriteToUser", fields: [userId], references: [id])
  userId    String
  product   Product  @relation("UserFavoriteToProduct", fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartProduct {
  id        String   @id @default(uuid())
  quantity  Int      @default(1)
  user      User     @relation("CartProductToUser", fields: [userId], references: [id])
  userId    String
  product   Product  @relation("CartProductToProduct", fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
